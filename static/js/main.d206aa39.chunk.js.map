{"version":3,"sources":["components/Header.js","components/Posts.js","components/Post.js","components/NotFound.js","components/PostForm.js","components/EditPost.js","components/Login.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","to","isAuthenticated","Posts","posts","deletePost","length","style","boxShadow","map","post","title","content","ops","insert","substring","backgroundColor","color","textDecoration","textTransform","height","margin","borderRadius","padding","slug","Post","handelDeletePost","e","preventDefault","key","console","log","this","contentHTML","QuillDeltaToHtmlConverter","convert","dangerouslySetInnerHTML","__html","class","display","justifyContent","marginBottom","flexWrap","width","textAlign","fontSize","marginTop","border","outline","cursor","onClick","React","Component","NotFound","PostForm","state","served","handleFormSubmit","addNewPost","setState","alert","onSubmit","htmlFor","id","value","onChange","target","delta","source","editor","getContents","type","EditPost","editPost","Login","email","password","handleLogin","onLogin","disabled","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","redirect","auth","signInWithEmailAndPassword","then","user","catch","postsRef","database","ref","encodeURIComponent","toLowerCase","split","join","push","update","window","confirm","remove","on","snapshot","val","newPosts","prevProps","prevSate","json","JSON","stringify","localStorage","setItem","path","render","signOut","exact","find","match","params","postSlug","component","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d206aa39.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from  \"react-router-dom\";\r\n\r\nconst Header = (props) =>{\r\n    return(\r\n        <header >\r\n            <div className=\"container\">\r\n            <NavLink className=\"home\" to=\"/\">All Posts</NavLink>\r\n            {props.isAuthenticated\r\n            ?<><NavLink className=\"links\" to=\"/new\">Add New Post</NavLink>\r\n               <NavLink className=\"links logout\" to=\"/logout\">Logout</NavLink></>\r\n            :<NavLink className=\"links\" to=\"/login\">Login</NavLink>}\r\n            </div>\r\n            \r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from  \"react-router-dom\";\r\n\r\nconst Posts=({posts, deletePost})=>{\r\n    return(\r\n        <article className=\"container\">\r\n            <h1 className=\"h1-posts\">My Posts</h1>\r\n            {posts.length < 1 \r\n            ? <p>No Posts Yet</p>\r\n            :<div style={{boxShadow:\"0 4px 8px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                {(posts || []).map(\r\n                    (post)=>{\r\n                        return(\r\n                            <div className=\"posts\">\r\n                                <div className=\"posts-data\">\r\n                                    <h2 className=\"h2-posts\">{post.title}</h2>\r\n                                    <p>{post.content.ops[0].insert.substring(0,100)+\"....\"}</p>\r\n                                </div>\r\n                                <Link style={{\r\n                                    backgroundColor:\"darkslategray\",\r\n                                    color:\"white\",\r\n                                    textDecoration:\"none\",\r\n                                    textTransform:\"uppercase\",\r\n                                    height:\"fit-content\",\r\n                                    margin:\"2rem 0\",\r\n                                    borderRadius:\"10px\",\r\n                                    padding:\"0 10px\",\r\n                                \r\n                                }}to = {`/post/${post.slug}`}>\r\n                                <p>Read More</p>\r\n                                </Link>\r\n                            </div>)\r\n                            \r\n                        }\r\n                    \r\n                    \r\n                    )}\r\n                </div>\r\n            }\r\n\r\n            \r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {QuillDeltaToHtmlConverter} from 'quill-delta-to-html';\r\nimport \"../App.css\"\r\n\r\nclass Post extends React.Component{\r\n    \r\n    \r\n    handelDeletePost=(e)=>{\r\n        e.preventDefault();\r\n        this.props.deletePost(this.props.post.key)\r\n    }\r\n\r\n    render(){\r\n\r\n        \r\n    console.log(this.props.post);\r\n\r\n        const converter=new QuillDeltaToHtmlConverter(this.props.post.content.ops,{})\r\n        const contentHTML=converter.convert();\r\n        return(\r\n            <>\r\n                {\r\n                    \r\n                        <article className=\"container\">\r\n                            <h3 className=\"post-title\">{this.props.post.title}</h3>\r\n                            <div className=\"content\" dangerouslySetInnerHTML={{__html:contentHTML}}/>\r\n                            {this.props.isAuthenticated \r\n                            && \r\n                                <div class=\"btn\" style={{display:\"flex\",justifyContent:\"space-between\",marginBottom:\"10px\",flexWrap:\"wrap\"}}>\r\n                                    <Link style={{\r\n                                        textDecoration:\"none\",\r\n                                        width:\"230px\",\r\n                                        textAlign:\"center\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"16px\",\r\n                                        textTransform:\"uppercase\",\r\n                                        fontSize:\"inherit\",\r\n                                        marginTop:\"15px\",\r\n                                        backgroundColor:\"darkslategray\"\r\n                                    }}to ={`/edit/${this.props.post.slug}`}>\r\n                                        <p>Update Post</p>\r\n                                    </Link>\r\n                                    <button  style={{\r\n                                        border:0,\r\n                                        outline:0,\r\n                                        width:\"230px\",\r\n                                        padding:\"16px\",\r\n                                        color:\"white\",\r\n                                        cursor:\"pointer\",\r\n                                        borderRadius:\"16px\",\r\n                                        backgroundColor:\"rgb(240, 65, 65)\",\r\n                                        marginTop:\"15px\",\r\n                                        fontSize:\"inherit\"\r\n                                    }} onClick={this.handelDeletePost}>DELETE</button>\r\n                                </div>\r\n                            }\r\n                            \r\n\r\n                        </article>\r\n                    \r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Post;","import React from 'react';\r\n// import {Link} from 'react-router-dom';\r\n\r\nconst NotFound = () =>{\r\n    return(\r\n        <article>\r\n            <h2>404 Page not found!</h2>\r\n            <p>The page you are requesting is not found or does not exist</p>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Quill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nclass PostForm extends React.Component{\r\n    state={\r\n        title:\"\",\r\n        content:\"\",\r\n        served:false\r\n    }\r\n\r\n    handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(this.state.title){\r\n            const post = {\r\n                title:this.state.title,\r\n                content:this.state.content\r\n            }\r\n            this.props.addNewPost(post);\r\n            this.setState(()=>{\r\n                return{served:true};\r\n            })\r\n        }else{\r\n            alert('Title require');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            {this.state.served?<Redirect to=\"/\" />:\r\n            <form className=\"container form\" onSubmit={this.handleFormSubmit}>\r\n                <h3 className=\"h3\">Add A New Post </h3>\r\n                <p>\r\n                    <label htmlFor=\"form-title\">Title:</label>\r\n                    <br/>\r\n                    <input id=\"form-title\" value={this.state.title} onChange={(e)=> this.setState({title:e.target.value})}></input>\r\n                    \r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"form-content\">Content:</label>\r\n                    <br/>\r\n                    <Quill onChange={(content,delta,source,editor) =>{\r\n                        this.setState({content:editor.getContents()});\r\n                    }}/>\r\n                </p>\r\n                <p>\r\n                     <button type=\"submit\">Save</button>\r\n                </p>\r\n            </form>}\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default PostForm;\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Quill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nclass EditPost extends React.Component{\r\n    state={\r\n        key:this.props.post.key,\r\n        title:this.props.post.title,\r\n        content:this.props.post.content,\r\n        served:false\r\n    }\r\n\r\n    handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(this.state.title){\r\n            const post = {\r\n                key:this.state.key,\r\n                title:this.state.title,\r\n                content:this.state.content\r\n            }\r\n            this.props.editPost(post);\r\n            this.setState(()=>{\r\n                return{served:true};\r\n            })\r\n        }else{\r\n            alert('Title required');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {this.state.served?<Redirect to=\"/\" />:\r\n                <form className=\"container form\" onSubmit={this.handleFormSubmit}>\r\n                    <h3 className=\"h3\">Editing {this.state.title}</h3>\r\n                    <p><label htmlFor=\"edit-title\">Title:</label><br/>\r\n                    <input id=\"edit-title\" value={this.state.title} onChange={(e)=> this.setState({title:e.target.value})} />\r\n                    </p>\r\n                    <p>\r\n                        <label htmlFor=\"edit-content\">Content:</label><br/>\r\n                        <Quill value={this.state.content} onChange={(content,delta,source,editor) =>{\r\n                        this.setState({content:editor.getContents()});\r\n                    }}/>\r\n                    </p>\r\n                    <p>\r\n                     <button type=\"submit\">Save</button>\r\n                    </p>\r\n                </form>}\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default EditPost","import React from 'react';\r\n\r\nclass Login extends React.Component{\r\n    state={\r\n        email:\"\",\r\n        password:\"\"\r\n    };\r\n\r\n    handleLogin = (e) =>{\r\n        e.preventDefault();\r\n        this.props.onLogin(this.state.email,this.state.password);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"login-container\">\r\n                <h2 className=\"h2-login\">Login</h2>\r\n                <form className=\"form\" onSubmit={this.handleLogin}>\r\n                    <label htmlFor=\"login-email\">Email:</label>\r\n                    <br/>\r\n                    <input htmlFor=\"input-email\" type=\"text\" onChange={(e)=>this.setState({email:e.target.value})}/>\r\n                    <p></p>\r\n                    <label htmlFor=\"login-password\">Password:</label>\r\n                    <br/>\r\n                    <input htmlFor=\"input-password\" type=\"password\" onChange={(e)=>this.setState({password:e.target.value})} />\r\n                    <p></p>\r\n                    <button disabled={ !this.state.email && !this.state.password}type=\"submit\">Login</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Login;","import * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst config ={\r\n    apiKey: \"AIzaSyAWVNRMVNeRO1WWmZhfFSMN4NUFhLvNHF8\",\r\n    authDomain: \"blog-4450.firebaseapp.com\",\r\n    databaseURL: \"https://blog-4450.firebaseio.com\",\r\n    projectId: \"blog-4450\",\r\n    storageBucket: \"blog-4450.appspot.com\",\r\n    messagingSenderId: \"76639964367\",\r\n    appId: \"1:76639964367:web:3f490d733678702906bbba\"\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;","import React from 'react';\nimport {BrowserRouter as Router,Switch,Route,Redirect}from \"react-router-dom\";\n\n\nimport Header from './components/Header';\nimport Posts from './components/Posts';\nimport Post from './components/Post';\nimport NotFound from './components/NotFound';\nimport PostForm from './components/PostForm';\nimport EditPost from './components/EditPost';\nimport Login from './components/Login';\nimport firebase from './firebase';\n\nimport './App.css';\n\nclass App extends React.Component{\n  state={\n    isAuthenticated:false,\n    posts:[],\n    redirect:false\n  }\n\n  componentDidMount(){\n    const postsRef = firebase.database().ref(\"posts\");\n    postsRef.on(\"value\",snapshot =>{\n      const posts = snapshot.val();\n      const newPosts = [];\n      for(let post in posts){\n        newPosts.push({\n          key:post,\n          slug:posts[post].slug,\n          title:posts[post].title,\n          content:posts[post].content\n        });\n      }\n      this.setState({posts:newPosts});\n    });\n  }\n\n  componentDidUpdate(prevProps,prevSate){\n      const json = JSON.stringify(this.state.posts)\n      localStorage.setItem('posts',json)\n  }\n\n  onLogin = (email,password) =>{\n    firebase\n    .auth()\n    .signInWithEmailAndPassword(email,password)\n    .then(user=>this.setState({isAuthenticated:true}))\n    .catch(e=>console.log(e));\n  }\n\n  addNewPost=(post)=>{\n    const postsRef = firebase.database().ref(\"posts\");\n    post.slug=encodeURIComponent(post.title.toLowerCase().split(\" \").join(\"-\"));\n    postsRef.push(post);\n  }\n\n  editPost=(post)=>{\n    const postsRef = firebase.database().ref(\"posts/\"+post.key);\n    postsRef.update({\n      slug :encodeURIComponent(post.title.toLowerCase().split(\" \").join(\"-\")),\n      title:post.title,\n      content:post.content\n    })\n  }\n\n  deletePost=(key)=>{\n    if(window.confirm(\"Do you want to delete?\")){\n      const postsRef = firebase.database().ref(\"posts/\"+key);\n      postsRef.remove();\n    }\n  }\n\n  render(){\n    return(\n      <Router>\n        <div className=\"App\">\n\n          <Header isAuthenticated = {this.state.isAuthenticated}/>\n          <Switch>\n              {/* Login route handler and checks isAuthenticated  */}\n              <Route path=\"/login\" \n                render = {()=>\n                !this.state.isAuthenticated\n                ?<Login onLogin={this.onLogin}/>\n                :<Redirect to=\"/\"/> \n                }\n              />\n\n              {/* Logout route handler and this also checks isAuthenticated */}\n              <Route path=\"/logout\" \n                render = {()=>\n                  {firebase.auth().signOut()\n                  .then(()=>this.setState({isAuthenticated:false}))\n                  .catch(e=>console.log(e))\n                  return(<Redirect to=\"/\" />)}\n                }\n              />      \n              \n              {/* Root path of our site with n number of posts to display. */}\n              <Route exact path=\"/\">\n                <Posts posts = {this.state.posts}  />\n              </Route>\n\n              \n              {/* A single post route  */}\n              <Route path=\"/post/:postSlug\"\n              render = {(props)=>\n                {const post = (this.state.posts || []).find(\n                (post)=>post.slug === props.match.params.postSlug);\n                return (post \n                ? <Post post={post} deletePost={this.deletePost} isAuthenticated={this.state.isAuthenticated}/> \n                : <Redirect to=\"/\"/>)}}\n              />\n\n              {/* Route to creating a new post. */}\n              <Route path=\"/new\" \n              render={()=>\n              (this.state.isAuthenticated \n              ? <PostForm addNewPost={this.addNewPost} /> \n              : <Redirect to=\"/login\"/> )} />\n              \n              \n              {/* Route to handle editing an existing post. */}\n              <Route path=\"/edit/:postSlug\" \n              render = {(props)=>\n                {const post = (this.state.posts || []).find(\n                (post)=>post.slug === props.match.params.postSlug);\n                return (post \n                ? <EditPost post={post} editPost={this.editPost} />\n                : <Redirect to=\"/\"/>)}}\n              />\n              \n              {/* 404 Route. */}\n              <Route component={NotFound} />\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}